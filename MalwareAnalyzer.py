import os
import hashlib
import pefile
import requests
import json

def calculate_md5(file_path):
    with open(file_path, 'rb') as f:
        data = f.read()
        return hashlib.md5(data).hexdigest()

def perform_static_analysis(file_path):
    try:
        pe = pefile.PE(file_path)

        print("General Information:")
        print("MD5: ", calculate_md5(file_path))
        print("File Size: ", os.path.getsize(file_path))
        print("Entry Point: ", hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
        print("Number of Sections: ", pe.FILE_HEADER.NumberOfSections)
        print("Image Base: ", hex(pe.OPTIONAL_HEADER.ImageBase))
        print("")

        print("Imported Functions:")
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print(entry.dll.decode('utf-8'))
            for imp in entry.imports:
                print(hex(imp.address), imp.name.decode('utf-8'))
            print("")

        print("Exported Functions:")
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                print(hex(pe.OPTIONAL_HEADER.ImageBase + exp.address), exp.name.decode('utf-8'))
            print("")

        # Additional static analysis techniques and outputs can be added here

    except pefile.PEFormatError as e:
        print("Error: Invalid PE file format -", str(e))

def scan_with_virustotal(file_path, api_key):
    url = 'https://www.virustotal.com/api/v3/files'
    headers = {
        'x-apikey': api_key
    }
    params = {
        'wait_for_analysis': True
    }
    files = {
        'file': open(file_path, 'rb')
    }
    response = requests.post(url, headers=headers, params=params, files=files)
    if response.status_code == 200:
        json_response = json.loads(response.text)
        data = json_response['data']
        attributes = data['attributes']
        print("VirusTotal Scan Results:")
        print("MD5: ", attributes['md5'])
        print("File Size: ", attributes['size'])
        print("Type: ", attributes['type'])
        print("First Submission Date: ", attributes['first_submission_date'])
        print("Last Analysis Date: ", attributes['last_analysis_date'])
        print("Total Engines Detected: ", attributes['last_analysis_stats']['malicious'])
    else:
        print("Error: VirusTotal scan failed.")

# Get user input for file path and VirusTotal API key
file_path = input("Enter the path to the malware sample file: ")
api_key = input("Enter your VirusTotal API key: ")

# Perform static analysis
perform_static_analysis(file_path)

# Scan with VirusTotal
scan_with_virustotal(file_path, api_key)
